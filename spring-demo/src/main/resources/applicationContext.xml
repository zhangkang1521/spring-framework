<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- 单例bean,spring容器启动时即初始化 -->
    <bean id="user0" class="org.zk.domain.User" lazy-init="true">
        <property name="id" value="100"/>
    </bean>


    <!-- 容器后处理器，用于容器启动后，对bean的属性进行处理，比如配置文件占位符替换 -->
    <!--<bean class="org.zk.core.MyBeanFactoryPostProcessor"/>-->

    <!-- 容器注册后处理器，用于注册bean到容器中，比如mybatis的Mapper自动注册 -->
    <!--<bean class="org.zk.core.MyBeanDefinitionRegistryPostProcessor"/>-->

    <!-- 容器后处理器，替换bean的占位符 -->
    <!--<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">-->
    <!--<property name="locations">-->
    <!--<array>-->
    <!--<value>classpath:jdbc.properties</value>-->
    <!--</array>-->
    <!--</property>-->
    <!--</bean>-->



    <!-- bean后置处理器，初始化前后调用-->
    <!--<bean class="org.zk.core.MyBeanPostProcessor"></bean>-->

    <!-- 实例化处理.构造方法调用前后 -->
    <!--<bean class="org.zk.core.MyInstantiationAwareBeanPostProcessors"></bean>-->

    <!-- 自动注入以下4个处理器 -->
    <!--<context:annotation-config/>  -->

    <!-- @PostConstruct @PreDestroy @Resource 注解处理 -->
    <!--<bean class="org.springframework.context.annotation.CommonAnnotationBeanPostProcessor"/>-->

    <!-- @Autowired @Inject @Value 注解处理 -->
    <!--<bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor"/>-->

    <!-- @Required 注解处理 -->
    <!--<bean class="org.springframework.beans.factory.annotation.RequiredAnnotationBeanPostProcessor"/>-->

    <!-- @Configuration注解 -->
    <!--<bean class="org.springframework.context.annotation.ConfigurationClassPostProcessor"/>-->


    <!-- 模拟dubbo @Reference -->
    <!--<bean class="org.zk.domain.ReferenceAnnotationBeanPostProcessor"></bean>-->


    <!--  自定义属性编辑器，将String转换为Date，使用容器后处理器加入自定义属性编辑器注册器 -->
    <!--<bean class="org.springframework.beans.factory.config.CustomEditorConfigurer">-->
        <!--<property name="propertyEditorRegistrars">-->
            <!--<list>-->
                <!--<bean class="org.zk.core.MyDatePropertyEditorRegistrar"></bean>-->
            <!--</list>-->
        <!--</property>-->
    <!--</bean>-->

    <!-- 自定义convert, beanId必须为conversionService，在refresh的finishBeanFactoryInitialization方法中添加 -->
    <!--<bean id="conversionService" class="org.springframework.context.support.ConversionServiceFactoryBean">-->
        <!--<property name="converters">-->
            <!--<set>-->
                <!--<bean class="org.zk.core.MyString2DateConverter"></bean>-->
            <!--</set>-->
        <!--</property>-->
    <!--</bean>-->

    <!-- 国际化 -->
    <!--<bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">-->
        <!--<property name="basenames">-->
            <!--<list>-->
                <!--<value>messages</value>-->
            <!--</list>-->
        <!--</property>-->
    <!--</bean>-->


    <!-- 事件机制  -->
    <!--<bean class="org.zk.event.UserService"></bean>-->
    <!--<bean class="org.zk.event.ScoreService"></bean>-->
    <!-- 自定义事件广播器，异步处理事件 -->
    <!--<bean id="taskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">-->
    <!--</bean>-->
    <!--<bean id="applicationEventMulticaster" class="org.springframework.context.event.SimpleApplicationEventMulticaster">-->
        <!--<property name="taskExecutor" ref="taskExecutor"></property>-->
    <!--</bean>-->

    <!-- 生命周期 -->
    <!--<bean class="org.zk.core.MyLifeCycle" scope="singleton"/>-->






    <!--<bean class="org.springframework.validation.beanvalidation.BeanValidationPostProcessor"/>-->
    <!--<bean class="org.springframework.validation.beanvalidation.MethodValidationPostProcessor"/>-->
    <!--<bean class="org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor"/>-->
    <!--<bean class="org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessor"/>-->
    
</beans>



